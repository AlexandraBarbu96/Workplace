@model Workplace_v2._2.Models.Answer

@{
    ViewBag.Title = "QuestionForm";
    var endtime = DateTime.UtcNow.AddSeconds(600);
    var timeRemaining = TimeSpan.FromTicks(endtime.Ticks - DateTime.UtcNow.Ticks).TotalSeconds;

}

<h2>QuestionForm</h2>

@using (Html.BeginForm("QuestionForm", "Interviews", FormMethod.Post, new { @class = "form-horizontal", name = "questionForm", role = "form", enctype = "multipart/form-data" }))
{
    <div>Time remaining on the question: <span id="minRemaining"></span> : <span id="secRemaining"></span></div>
    @Html.ValidationSummary()
    <table>
        <tr>
            <th>
                @Html.DisplayFor(qa => Model.Question.QuestionText)
            </th>
            <td>
                @Html.EditorFor(qa => Model.AnswerText)
            </td>
        </tr>
    </table>


    @Html.HiddenFor(qa => Model.Question.CreatorId)
    @Html.HiddenFor(qa => Model.Question.DomainId)
    @Html.HiddenFor(qa => Model.Question.QuestionId)
    @Html.HiddenFor(qa => Model.Question.QuestionText)


    @Html.HiddenFor(qa => Model.InterviewId)
    @Html.HiddenFor(qa => Model.QuestionId)
    @Html.HiddenFor(qa => Model.AnswerId)
    @Html.HiddenFor(qa => Model.AnswerScore)
    @Html.HiddenFor(qa => Model.AnswerText)

    @Html.AntiForgeryToken()
    <div class="form-actions no-color">
        <input type="submit" value="Next Question" class="btn btn-default" /> |
        @Html.ActionLink("Back to List", "Index", "Home")
    </div>

}

<script>
    var remSeconds = @timeRemaining;
    var secondsCounter = remSeconds % 60;

    function formatNumber(number) {
        if (number < 10) return '0' + number;
        else return '' + number;
    }

    function startTick() {
        document.getElementById("secRemaining").innerText = formatNumber(secondsCounter);
        document.getElementById("minRemaining").innerText = formatNumber(parseInt(remSeconds / 60));

        var _tick = setInterval(function () {
            if (remSeconds > 0) {
                remSeconds = remSeconds - 1;
                secondsCounter = secondsCounter - 1;
                if (secondsCounter < 0) {
                    secondsCounter = 60 + secondsCounter;
                }
                document.getElementById("secRemaining").innerText = formatNumber(secondsCounter);
                document.getElementById("minRemaining").innerText = formatNumber(parseInt(remSeconds / 60));
                if (secondsCounter == 0) {
                    secondsCounter = 60;
                }
            }
            else {
                alert('The time for the current question has expired.');
                clearInterval(_tick);
                window.location.href = "/Interviews/QuestionForm/Model";
            }

        }, 1000)
    }
    startTick();
</script>
@*
    <script type="text/javascript">
    function startCountdown(timeLeft) {
        var interval = setInterval(countdown, 1000);
        update();

        function countdown() {
            if (--timeLeft > 0) {
                update();
            } else {
                clearInterval(interval);
                update();
                //Show the alert message , change the message as per your need
                alert('Time Up!');
                completed();
            }
        }

        function update() {
            hours = Math.floor(timeLeft / 3600);
            minutes = Math.floor((timeLeft % 3600) / 60);
            seconds = timeLeft % 60;

            document.getElementById('time-left').innerHTML = '' + hours + ':' + minutes + ':' + seconds;
        }

        function completed() {
            //Change the url here
            window.location = @Url.Action("QuestionForm", "Interviews", new { answer = Model });
        }
    }
    </script>
*@
